def _no_op_missing_aar_impl(name, **_kwargs):
    """
    This is a help macro for missing concrete rule implementation.

    This will be used in cases when some dependencies require aar_import rule implementation.

    Args:
        name: A unique name for this target.
        **_kwargs: Anything else. Not used.
    """

    fail(
        "Unable to create target {} since it is a aar_import which was not provided. Add argument aar_import when calling {{generate_transitive_dependency_targets}}."
            .format(name),
    )

def {{generate_transitive_dependency_targets}}(
        name = "{{generate_transitive_dependency_targets}}",
        <<java_library>> = native.java_library,
        <<java_plugin>> = native.java_plugin,
        <<jvm_import>> = jvm_import,
        <<aar_import>> = _no_op_missing_aar_impl):
    """
    Macro to set up the transitive rules.

    You can provide your own implementation of jvm_import, aar_import, etc. This can be used
    in cases where you need to shade (or jar_jar or jetify) your jars.

    Args:
        name: a unique name for this macro. Not needed to specify.
        <<java_library>>: rule implementation for java_library. Defaults to native.java_library.
        <<java_plugin>>: rule implementation for java_plugin. Defaults to native.java_plugin.
        <<jvm_import>>: rule implementation for jvm_import. Defaults to jvm_import.
        <<aar_import>>: rule implementation for aar_import. Required only if you have Android dependencies.
    """
